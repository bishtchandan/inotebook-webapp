{"ast":null,"code":"var _jsxFileName = \"/home/chandan/Desktop/projects/inotebook-webapp/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // get a note\n\n  const getNotes = async () => {\n    // API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  }; // Add a note\n\n\n  const addNote = async (title, description, tag) => {\n    // API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; // delete a note\n\n\n  const deleteNote = async id => {\n    // API call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json); // Deleting note\n\n    console.log(\"Deleting the note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // edit a note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // API call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes)); // logic to edit a note\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/home/chandan/Desktop/projects/inotebook-webapp/src/context/notes/NoteState.js"],"names":["noteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import noteContext from \"./noteContext\";\nimport { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // get a note\n  const getNotes = async () => {\n     // API call\n     const response = await fetch(\n      `${host}/api/notes/fetchallnotes`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem('token'),\n        }\n      }\n    );\n    const json = await response.json();\n    console.log(json)\n    setNotes(json)\n  };\n  // Add a note\n  const addNote = async (title, description, tag) => {\n     // API call\n     const response = await fetch(\n      `${host}/api/notes/addnote`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\":  localStorage.getItem('token'),\n        },\n        body: JSON.stringify({title, description, tag}),\n      }\n    );\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n  // delete a note\n  const deleteNote = async (id) => {\n    // API call\n    const response = await fetch(\n      `${host}/api/notes/deletenote/${id}`,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\":  localStorage.getItem('token'),\n        }\n      }\n    );\n    const json = response.json();\n    console.log(json)\n    // Deleting note\n    console.log(\"Deleting the note with id\" + id);\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  // edit a note\n  const editNote = async (id, title, description, tag) => {\n    // API call\n    const response = await fetch(\n      `${host}/api/notes/updatenote/${id}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\":  localStorage.getItem('token'),\n        },\n        body: JSON.stringify({title, description, tag}),\n      }\n    );\n    const json = await response.json();\n    console.log(json)\n\n    let newNotes = JSON.parse(JSON.stringify(notes))\n    // logic to edit a note\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes)\n  };\n\n  return (\n    <noteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes}}>\n      {props.children}\n    </noteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}